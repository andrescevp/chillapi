"""master/autogenerated

Revision ID: 7157c7fb3fd3
Revises:
Create Date: 2021-03-27 21:28:38.932926

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision = '7157c7fb3fd3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    conn = op.get_bind()
    conn.execute(
        text(
            """
            CREATE TABLE IF NOT EXISTS book_category (
               id serial,
               name JSON NOT NULL,
               created_at timestamp,
               created_by VARCHAR,
               updated_at timestamp,
               updated_by VARCHAR,
               deleted_at timestamp,
               deleted_by VARCHAR,
               PRIMARY KEY (id)
            );
            """
        )
    )

    conn.execute(
        text(
            """
            CREATE TABLE IF NOT EXISTS book (
               id serial,
               book_category_id int NOT NULL,
               name VARCHAR NOT NULL,
               asin VARCHAR NOT NULL,
               created_at timestamp,
               created_by VARCHAR,
               updated_at timestamp,
               updated_by VARCHAR,
               deleted_at timestamp,
               deleted_by VARCHAR,
               PRIMARY KEY (id),
               CONSTRAINT FK_BOOK_CATEGORY_ID FOREIGN KEY (book_category_id) REFERENCES book_category (id)
            );
            """
        )
    )

    conn.execute(
        text(
            """
            CREATE UNIQUE INDEX IDX_UNQ_BOOK_ISIN ON book (asin);
            """
        )
    )

    conn.execute(
        text(
            """
            CREATE TABLE IF NOT EXISTS author (
               id serial,
               name JSON NOT NULL,
               asin VARCHAR NOT NULL,
               created_at timestamp,
               created_by VARCHAR,
               updated_at timestamp,
               updated_by VARCHAR,
               deleted_at timestamp,
               deleted_by VARCHAR,
               PRIMARY KEY (id)
            );
            """
        )
    )

    conn.execute(
        text(
            """
            CREATE UNIQUE INDEX IDX_UNQ_AUTHOR_ISIN ON author (asin);
            """
        )
    )

    conn.execute(
        text(
            """
            CREATE TABLE book_has_author (
              book_id  int REFERENCES book (id),
              author_id int REFERENCES author (id),
              CONSTRAINT book_has_author_pkey PRIMARY KEY (book_id, author_id)
            );
            """
        )
    )



    conn.execute(
        text(
            """
            CREATE TABLE IF NOT EXISTS dummy_create (
               id serial,
               name varchar not null,
               creation timestamp,
               PRIMARY KEY (id)
            );
            """
        )
    )

    conn.execute(
        text(
            """
            CREATE TABLE IF NOT EXISTS dummy (
               id serial,
               name varchar not null
            );
            """
        )
    )

    conn.execute(
        text(
            """
            INSERT INTO book_category (id, name, created_at) VALUES
            (1, '{"en-US":"Suspense"}', current_timestamp)
            """
        )
    )

    conn.execute(
        text(
            """
            INSERT INTO book (id, book_category_id, name, asin, created_at) VALUES
            (1, 1, 'The Dark Tower', '1444723502', current_timestamp)
            """
        )
    )
    conn.execute(
        text(
            """
            INSERT INTO author (id, name, asin, created_at) VALUES
            (1, '{"en-US": "Stephen King"}', 'X23XX', current_timestamp)
            """
        )
    )

    conn.execute(
        text(
            """
            INSERT INTO book_has_author (author_id, book_id) VALUES (1, 1)
            """
        )
    )


pass


def downgrade():
    conn = op.get_bind()
    conn.execute(
        text(
            """
            DROP TABLE dummy
            """
        )
    )
    conn.execute(
        text(
            """
            DROP TABLE dummy_create
            """
        )
    )
    conn.execute(
        text(
            """
            DROP TABLE book_category
            """
        )
    )
    conn.execute(
        text(
            """
            DROP TABLE book_has_author
            """
        )
    )
    conn.execute(
        text(
            """
            DROP TABLE author
            """
        )
    )
    conn.execute(
        text(
            """
            DROP TABLE book
            """
        )
    )
    pass
